---
x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: 0YBXIBP6WTMH-nyvvDs8fpu2B4-GDwsBF5Kgq5yoS7c=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-.}
    KAFKA_NEWS_TOPIC: ${KAFKA_NEWS_TOPIC:-.}
    POSTGRES_USER: ${POSTGRES_USER:-airflow}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-airflow}
    POSTGRES_SERVER: ${POSTGRES_SERVER:-postgres}
    OUTPUT_DIR: "/opt/airflow/data"
    MISTRAL_API_KEY: ${MISTRAL_API_KEY:-mistral_api_key}
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    SPARK_JOBS_PARENT_FOLDER: ${SPARK_JOBS_PARENT_FOLDER:-/opt/airflow}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/kafka_producer:/opt/airflow/kafka_producer
    - ${AIRFLOW_PROJ_DIR:-.}/spark_jobs:/opt/airflow/spark_jobs
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-.}/feeds_config.py:/opt/airflow/feeds_config.py

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - airflow-network

x-kafka-common: &kafka-common
  image: bitnami/kafka:3.9.0
  environment:
    &kafka-common-env
    ALLOW_ANONYMOUS_LOGIN: "yes"
    KAFKA_ENABLE_KRAFT: "yes"
    KAFKA_CFG_PROCESS_ROLES: "broker,controller"
    KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
    BITNAMI_DEBUG: "yes"
    KAFKA_KRAFT_CLUSTER_ID: "a45762f7-4a3b-40a6-844f-83a145456cd6"
    KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "kraft:PLAINTEXT,CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT"
    KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka-broker-1:9094,2@kafka-broker-2:9094,3@kafka-broker-3:9094"
    KAFKA_CFG_KRAFT_REPLICATION_FACTOR: "3"
    KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "INTERNAL"
    KAFKA_CFG_DEFAULT_REPLICATION_FACTOR: "3"
    ALLOW_PLAINTEXT_LISTENER: "yes"
  networks:
    - airflow-network



services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow-network

  user-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-}
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - user-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow-network

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - airflow-network

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
 

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully


  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on
    

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    

  spark-master:
    image: bitnami/spark:3.5.6
    environment:
      SPARK_MODE: "master"
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "7077:7077" 
      - "9090:8080"
    networks:
     - airflow-network
    
  spark-worker-1:
    image: bitnami/spark:3.5.6
    environment:
      SPARK_MODE: "worker"
      SPARK_MASTER_URL: "spark://spark-master:7077"
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "8081:8081"
    networks:
      - airflow-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4g
  
  spark-worker-2:
    image: bitnami/spark:3.5.6
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "8082:8082"
    networks:
      - airflow-network
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4g

  spark-streaming:
    <<: *airflow-common
    command: >
      bash -c "/opt/spark/bin/spark-submit --master spark://spark-master:7077 --deploy-mode client --executor-memory 1024m --conf spark.executor.cores=1 --conf spark.cores.max=2 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.6,org.apache.kafka:kafka-clients:3.9.0 --jars /opt/airflow/spark_jobs/jars/postgresql-42.2.5.jar /opt/airflow/spark_jobs/enhance_feeds.py"
    depends_on:
      - spark-master
      - kafka-broker-1
      - kafka-init
      - postgres

 
  kafka-broker-1 :
    <<: *kafka-common
    container_name: kafka-controller
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_LISTENERS: "kraft://0.0.0.0:9093,CONTROLLER://0.0.0.0:9094,INTERNAL://0.0.0.0:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "kraft://kafka-broker-1:9093,CONTROLLER://kafka-broker-1:9094,INTERNAL://kafka-broker-1:9092"
    ports:
    - "9101:9092"
    - "9102:9093"
    - "9103:9094"
    volumes:
      - broker1_data:/bitnami/kafka

  kafka-broker-2:
    <<: *kafka-common
    container_name: kafka-broker-2
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_NODE_ID: "2"
      KAFKA_CFG_LISTENERS: "kraft://0.0.0.0:9093,CONTROLLER://0.0.0.0:9094,INTERNAL://0.0.0.0:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "kraft://kafka-broker-2:9093,CONTROLLER://kafka-broker-2:9094,INTERNAL://kafka-broker-2:9092"

    ports:
      - "9095:9092"
      - "9096:9093"
      - "9097:9094"
    volumes:
      - broker2_data:/bitnami/kafka

  kafka-broker-3:
    <<: *kafka-common
    container_name: kafka-broker-3
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_NODE_ID: "3"
      KAFKA_CFG_LISTENERS: "kraft://0.0.0.0:9093,CONTROLLER://0.0.0.0:9094,INTERNAL://0.0.0.0:9092"
      KAFKA_CFG_ADVERTISED_LISTENERS: "kraft://kafka-broker-3:9093,CONTROLLER://kafka-broker-3:9094,INTERNAL://kafka-broker-3:9092"
    ports:
      - "9098:9092"
      - "9099:9093"
      - "9100:9094"
    volumes:
      - broker3_data:/bitnami/kafka

  kafka-init:
    <<: *kafka-common
    command: >
     bash -c "kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-broker-1:9092 --replication-factor 1 --partitions 3 --topic news_topic"
    depends_on:
     - kafka-broker-1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092
      KAFKA_CLUSTERS_0_READONLY: "false"
    networks:
      - airflow-network
  
  insight-api:
    build:
      context: fastapi
      dockerfile: Dockerfile
    environment:
      - MISTRAL_API_KEY=${MISTRAL_API_KEY:-mistral_api_key}
      - POSTGRES_SERVER=${POSTGRES_SERVER:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-airflow}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-airflow}
      - OUTPUT_DIR=/app/spark_output
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/spark_output
    networks:
      - airflow-network

  insight-ui:
    build:
      context: ui/insight_africa
      dockerfile: Dockerfile
      args:
        VITE_PUBLIC_API_URL: ${VITE_PUBLIC_API_URL}
    ports:
      - "5173:80"
    networks:
      - airflow-network


networks:
  airflow-network:
    driver: bridge
volumes:
  postgres-db-volume:
  user-postgres-db-volume:
  broker1_data:
  broker2_data:
  broker3_data:
